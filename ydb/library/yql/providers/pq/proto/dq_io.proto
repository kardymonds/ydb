syntax = "proto3";
option cc_enable_arenas = true;

package NYql.NPq.NProto;

import "ydb/public/api/protos/ydb_value.proto";

message TToken {
    string Name = 1; // Key in secure params.
    // TODO: token type (oauth, tvm, iam etc).
}

enum EClusterType {
    Unspecified = 0;
    PersQueue = 1;
    DataStreams = 2;
}

message TWatermarks {
    bool Enabled = 1;
    uint64 GranularityUs = 2;
    uint64 LateArrivalDelayUs = 3;
    bool IdlePartitionsEnabled = 4;
}

message TExpression {
    message TArithmeticalExpression {
        // An operation code.
        enum EOperation {
            EXPRESSION_OPERATION_UNSPECIFIED = 0;
            MUL = 1; // left_value * right_value
            ADD = 2; // left_value + right_value
            SUB = 3; // left_value - right_value
            BIT_AND = 4; // left_value & right_value
            BIT_OR = 5; // left_value | right_value
            BIT_XOR = 6; // left_value ^ right_value
            // TODO: support `/` and `%`
        }
        EOperation operation = 1;
        TExpression left_value = 2;
        TExpression right_value = 3;
    }

    message TNull {
    }

    oneof payload {
        // A scalar value
        Ydb.TypedValue typed_value = 1;
        // A name of another column to compare with
        string column = 2;

        TArithmeticalExpression arithmetical_expression = 3;

        TNull null = 4;
    }
}

// Predicate
message TPredicate {
    // NOT
    message TNegation {
        TPredicate operand = 1;
    }

    // AND
    message TConjunction {
        repeated TPredicate operands = 1;
    }

    // OR
    message TDisjunction {
        repeated TPredicate operands = 1;
    }

    // "$column BETWEEN $least AND $greatest"
    message TBetween {
        TExpression value = 1;
        TExpression least = 2;
        TExpression greatest = 3;
    }

    // "$column IN $(set)"
    message TIn {
        TExpression value = 1;
        repeated TExpression set = 2;
    }

    // "$column IS NULL"
    message TIsNull {
        TExpression value = 1;
    }

    // "$column IS NOT NULL"
    // TODO: maybe it is better to express with TNegation here
    message TIsNotNull {
        TExpression value = 1;
    }

    // Expression wich has bool type
    // For example, bool column
    message TBoolExpression {
        TExpression value = 1;
    }

    // A subset of comparators corresponding to the binary logical operators
    message TComparison {
        // An operation code.
        enum EOperation {
            COMPARISON_OPERATION_UNSPECIFIED = 0;
            L = 1;  // "$column < value"
            LE = 2; // "$column <= value"
            EQ = 3; // "$column = value"
            NE = 4; // "$column != value"
            GE = 5; // "$column >= value"
            G = 6;  // "$column > value"
        }

        EOperation operation = 1;
        TExpression left_value = 2;
        TExpression right_value = 3;
    }

    oneof payload {
        TNegation negation = 1;
        TConjunction conjunction = 2;
        TDisjunction disjunction = 3;
        TBetween between = 4;
        TIn in = 5;
        TIsNull is_null = 6;
        TIsNotNull is_not_null = 7;
        TComparison comparison = 8;
        TBoolExpression bool_expression = 9;
    }
}

message TDqPqTopicSource {
    string TopicPath = 1;
    string ConsumerName = 2;
    string Endpoint = 3;
    TToken Token = 4;
    string Database = 5;
    EClusterType ClusterType = 6;
    bool UseSsl = 7;
    bool AddBearerToToken = 8;
    string DatabaseId = 9;
    repeated string MetadataFields = 10;
    TWatermarks Watermarks = 11;
    repeated string Columns = 12;
    TPredicate Predicate = 13;
    repeated string ColumnTypes = 14;
}

message TDqPqTopicSink {
    string TopicPath = 1;
    string Endpoint = 2;
    TToken Token = 3;
    string Database = 4;
    bool UseSsl = 5;
    bool AddBearerToToken = 6;
    EClusterType ClusterType = 7;
}
